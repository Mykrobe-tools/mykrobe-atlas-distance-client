# coding: utf-8

"""
    Distance API

    <p>An API for CRUD of two types of distances <li> between a sample and its closest samples <li> between a sample and its closest phylogenetic tree node <p>This API is intended to satisfy the following user stories <li> as a user, I want to add my new sample and its close neighbours so that I can retrieve them later <li> as a user, I want to query a sample for its close neighbours and their nearest nodes in a phylogenetic tree <li> as a user, I want to query a sample for its close neighbours so that I can do my analysis <li> as a user, I want to query a sample for its nearest node in a phylogenetic tree so that I can do my analysis <li> as a user, I want to update a sample with new list of close neighbours so that they are correct <li> as a user, I want to update a sample with new nearest leaf node in a phylogenetic tree so that it is correct <li> as a user, I want to remove the nearest leaf node in a phylogenetic tree from a sample so that it is correct <li> as a user, I want to remove a sample so that it is no longer available to any users <li> as a user, I want to add a new leaf node to the phylogenetic tree <li> as a user, I want to remove a leaf node from the phylogenetic tree <li> as a user, I want to query a tree node for a list of samples which have this as nearest tree node  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from distance_client.configuration import Configuration


class NearestLeaf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'leaf_id': 'str',
        'distance': 'int'
    }

    attribute_map = {
        'leaf_id': 'leaf_id',
        'distance': 'distance'
    }

    def __init__(self, leaf_id=None, distance=None, local_vars_configuration=None):  # noqa: E501
        """NearestLeaf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._leaf_id = None
        self._distance = None
        self.discriminator = None

        self.leaf_id = leaf_id
        self.distance = distance

    @property
    def leaf_id(self):
        """Gets the leaf_id of this NearestLeaf.  # noqa: E501


        :return: The leaf_id of this NearestLeaf.  # noqa: E501
        :rtype: str
        """
        return self._leaf_id

    @leaf_id.setter
    def leaf_id(self, leaf_id):
        """Sets the leaf_id of this NearestLeaf.


        :param leaf_id: The leaf_id of this NearestLeaf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and leaf_id is None:  # noqa: E501
            raise ValueError("Invalid value for `leaf_id`, must not be `None`")  # noqa: E501

        self._leaf_id = leaf_id

    @property
    def distance(self):
        """Gets the distance of this NearestLeaf.  # noqa: E501


        :return: The distance of this NearestLeaf.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this NearestLeaf.


        :param distance: The distance of this NearestLeaf.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and distance is None:  # noqa: E501
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NearestLeaf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NearestLeaf):
            return True

        return self.to_dict() != other.to_dict()
